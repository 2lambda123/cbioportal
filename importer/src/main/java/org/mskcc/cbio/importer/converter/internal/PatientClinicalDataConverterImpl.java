/** Copyright (c) 2012 Memorial Sloan-Kettering Cancer Center.
**
** This library is free software; you can redistribute it and/or modify it
** under the terms of the GNU Lesser General Public License as published
** by the Free Software Foundation; either version 2.1 of the License, or
** any later version.
**
** This library is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
** MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
** documentation provided hereunder is on an "as is" basis, and
** Memorial Sloan-Kettering Cancer Center 
** has no obligations to provide maintenance, support,
** updates, enhancements or modifications.  In no event shall
** Memorial Sloan-Kettering Cancer Center
** be liable to any party for direct, indirect, special,
** incidental or consequential damages, including lost profits, arising
** out of the use of this software and its documentation, even if
** Memorial Sloan-Kettering Cancer Center 
** has been advised of the possibility of such damage.  See
** the GNU Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public License
** along with this library; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
**/

// package
package org.mskcc.cbio.importer.converter.internal;

// imports
import org.mskcc.cbio.importer.Admin;
import org.mskcc.cbio.importer.Config;
import org.mskcc.cbio.importer.CaseIDs;
import org.mskcc.cbio.importer.IDMapper;
import org.mskcc.cbio.importer.Converter;
import org.mskcc.cbio.importer.FileUtils;
import org.mskcc.cbio.importer.SurvivalDataCalculator;
import org.mskcc.cbio.importer.model.*;
import org.mskcc.cbio.portal.model.ClinicalAttribute;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.*;
import java.util.regex.Matcher;

/**
 * Class which implements the Converter interface for use
 * with TCGA clinical data generated by the Biospecimen Core Resource.
 */
public class PatientClinicalDataConverterImpl extends ClinicalDataConverterImpl implements Converter
{
	private static Log LOG = LogFactory.getLog(PatientClinicalDataConverterImpl.class);

	private	SurvivalDataCalculator survivalDataCalculator;

    class PatientFollowUpMatrixComparator implements Comparator {
        public int compare (Object o, Object o1) {
            DataMatrix matrix0 = (DataMatrix)o;
            DataMatrix matrix1 = (DataMatrix)o1;
            return matrix0.getFilename().compareTo(matrix1.getFilename());
        }
    }

	public PatientClinicalDataConverterImpl(Config config, FileUtils fileUtils,
                                            CaseIDs caseIDs, IDMapper idMapper)
    {
        super(config, fileUtils, caseIDs, idMapper);

        ApplicationContext context = new ClassPathXmlApplicationContext(Admin.contextFile);
        survivalDataCalculator = (SurvivalDataCalculator)context.getBean("tcgaSurvivalDataCalculator");
	}

	@Override
	public void createStagingFile(PortalMetadata portalMetadata, CancerStudyMetadata cancerStudyMetadata,
								  DatatypeMetadata datatypeMetadata, DataMatrix[] dataMatrices) throws Exception {

        List<DataMatrix> dataMatrixList = new ArrayList<DataMatrix>(Arrays.asList(dataMatrices));
        DataMatrix patientMatrix = removePatientMatrix(dataMatrixList);
        List<DataMatrix> followUps = getSortedFollowUpMatrices(dataMatrixList);

        processPatientMatrix(cancerStudyMetadata, patientMatrix, followUps);

		logMessage(LOG, "createStagingFile(), writing staging file.");
        fileUtils.writeStagingFile(portalMetadata.getStagingDirectory(), cancerStudyMetadata, datatypeMetadata, patientMatrix);
		logMessage(LOG, "createStagingFile(), complete.");
	}

    private DataMatrix removePatientMatrix(List<DataMatrix> dataMatrices) throws Exception
    {
        for (DataMatrix dataMatrix : dataMatrices) {
            Matcher clinicalPatientMatcher = DatatypeMetadata.CLINICAL_PATIENT_FILE_REGEX.matcher(dataMatrix.getFilename());
            if (clinicalPatientMatcher.find()) {
                dataMatrices.remove(dataMatrix);
                return dataMatrix;
            }
        }
        logMessage(LOG, "createStagingFile(), cannot find clinical patient file, aborting.");
        throw new IllegalArgumentException("Cannot find clinical patient file, aborting");
    }

    private List<DataMatrix> getSortedFollowUpMatrices(List<DataMatrix> dataMatrices)
    {
        List<DataMatrix> followUps = new ArrayList<DataMatrix>(dataMatrices);
        Collections.sort(followUps, new PatientFollowUpMatrixComparator());
        return followUps;
    }

    private void processPatientMatrix(CancerStudyMetadata cancerStudyMetadata, DataMatrix patientMatrix, List<DataMatrix> followUps)
    {
        Map<String, ClinicalAttributesMetadata> clinicalAttributes = getClinicalAttributes(patientMatrix.getColumnHeaders());

        config.flagMissingClinicalAttributes(cancerStudyMetadata.toString(), cancerStudyMetadata.getTumorType(),
                                             removeUnknownColumnsFromMatrix(patientMatrix, clinicalAttributes));
        computeSurvivalData(patientMatrix, followUps);
        // comes last - modifying original column headers
        modifyMatrixHeaderToPortalSpec(patientMatrix, clinicalAttributes);
    }

    private void computeSurvivalData(DataMatrix patientMatrix, List<DataMatrix> followUps)
    {
        ArrayList<DataMatrix> allMatrices = new ArrayList<DataMatrix>();
        allMatrices.add(patientMatrix);
        //allMatrices.addAll(followUps);
        OverallSurvivalStatus oss = survivalDataCalculator.computeSurvivalData(allMatrices);
        patientMatrix.addColumn(ClinicalAttribute.OS_STATUS, oss.osStatus);
        patientMatrix.addColumn(ClinicalAttribute.OS_MONTHS, oss.osMonths);
        //patientMatrix.addColumn(ClinicalAttribute.DFS_STATUS, oss.dfStatus);
        //patientMatrix.addColumn(ClinicalAttribute.DFS_MONTHS, oss.dfMonths);
    }
}
