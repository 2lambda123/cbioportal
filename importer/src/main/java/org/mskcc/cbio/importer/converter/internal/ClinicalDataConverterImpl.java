/** Copyright (c) 2012 Memorial Sloan-Kettering Cancer Center.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 * documentation provided hereunder is on an "as is" basis, and
 * Memorial Sloan-Kettering Cancer Center 
 * has no obligations to provide maintenance, support,
 * updates, enhancements or modifications.  In no event shall
 * Memorial Sloan-Kettering Cancer Center
 * be liable to any party for direct, indirect, special,
 * incidental or consequential damages, including lost profits, arising
 * out of the use of this software and its documentation, even if
 * Memorial Sloan-Kettering Cancer Center 
 * has been advised of the possibility of such damage.
*/
package org.mskcc.cbio.importer.converter.internal;

import com.google.common.collect.*;
import org.mskcc.cbio.portal.model.ClinicalAttribute;
import org.mskcc.cbio.portal.scripts.ImportClinicalData;
import org.mskcc.cbio.importer.*;
import org.mskcc.cbio.importer.model.*;

import org.apache.commons.logging.*;

import java.io.*;
import java.util.*;
import java.util.regex.*;

/**
 * Class which implements the Converter interface for use
 * with TCGA clinical data generated by the Biospecimen Core Resource.
 */
public abstract class ClinicalDataConverterImpl extends ConverterBaseImpl implements Converter
{
	private static final Log LOG = LogFactory.getLog(ClinicalDataConverterImpl.class);

    private static final List<String> blacklistedColumns = initializeBlacklisted();
    private static List<String> initializeBlacklisted() {
        String[] blacklist = { "patient_id" };
        return Arrays.asList(blacklist);
    }

	protected Config config;
	protected FileUtils fileUtils;
	protected CaseIDs caseIDs;
	protected IDMapper idMapper;

	public ClinicalDataConverterImpl(Config config, FileUtils fileUtils,
                                     CaseIDs caseIDs, IDMapper idMapper)
    {
		this.config = config;
        this.fileUtils = fileUtils;
		this.caseIDs = caseIDs;
		this.idMapper = idMapper;
	}

    @Override
	public void convertData(String portal, String runDate, Boolean applyOverrides) throws Exception
    {
		throw new UnsupportedOperationException();
	}

    @Override
	public void generateCaseLists(String portal) throws Exception
    {
		throw new UnsupportedOperationException();
	}

    @Override
	public void applyOverrides(String portal, Set<String> excludeDatatypes, boolean applyCaseLists) throws Exception
    {
		throw new UnsupportedOperationException();
    }

	@Override
	public abstract void createStagingFile(PortalMetadata portalMetadata, CancerStudyMetadata cancerStudyMetadata,
                                           DatatypeMetadata datatypeMetadata, DataMatrix[] dataMatrices) throws Exception;

    protected Map<String, ClinicalAttributesMetadata> getClinicalAttributes(List<String> externalColumnHeaders)
    {
        Map<String, ClinicalAttributesMetadata> clinicalAttributes =
            config.getClinicalAttributesMetadata(externalColumnHeaders);

        // add overall survival attributes
        clinicalAttributes.put(ClinicalAttribute.OS_STATUS,
                               config.getClinicalAttributesMetadata(ClinicalAttribute.OS_STATUS).iterator().next());
        clinicalAttributes.put(ClinicalAttribute.OS_MONTHS,
                               config.getClinicalAttributesMetadata(ClinicalAttribute.OS_MONTHS).iterator().next());

        // add disease free attributes
        clinicalAttributes.put(ClinicalAttribute.DFS_STATUS,
                               config.getClinicalAttributesMetadata(ClinicalAttribute.DFS_STATUS).iterator().next());
        clinicalAttributes.put(ClinicalAttribute.DFS_MONTHS,
                               config.getClinicalAttributesMetadata(ClinicalAttribute.DFS_MONTHS).iterator().next());
        
        return clinicalAttributes;
    }

    protected Set<String> removeUnknownColumnsFromMatrix(DataMatrix dataMatrix, Map<String, ClinicalAttributesMetadata> clinicalAttributes)
    {
        Set<String> missingAttributes = new HashSet<String>();

        for (String externalColumnHeader : dataMatrix.getColumnHeaders()) {
            if (!clinicalAttributes.containsKey(externalColumnHeader)) {
                dataMatrix.ignoreColumn(externalColumnHeader, true);
                missingAttributes.add(externalColumnHeader);
                logMessage(LOG, "removeUnknownColumnsFromMatrix(), unknown clinical attribute: " +
                           externalColumnHeader + " (" + dataMatrix.getFilename() + ")");
            }
            // tcga data has "patient_id" in addition to "bcr_patient_barcode"
            else if (blacklistedColumns.contains(externalColumnHeader)) {
                dataMatrix.ignoreColumn(externalColumnHeader, true);
            }
        }

        return missingAttributes;
    }

    protected void modifyMatrixHeaderToPortalSpec(DataMatrix dataMatrix, Map<String, ClinicalAttributesMetadata> clinicalAttributes)
    {
        List<String> descriptions = new ArrayList<String>();
        List<String> datatypes = new ArrayList<String>();
        List<String> columnHeaders = new ArrayList<String>();

        for (String externalColumnHeader : dataMatrix.getColumnHeaders()) {
            if (clinicalAttributes.containsKey(externalColumnHeader)) {
                ClinicalAttributesMetadata metadata = clinicalAttributes.get(externalColumnHeader);
                dataMatrix.renameColumn(externalColumnHeader, attributeValue(metadata.getDisplayName()));
                descriptions.add(attributeValue(metadata.getDescription()));
                String datatype = attributeValue(metadata.getDatatype());
                datatypes.add(datatype.equals(ClinicalAttribute.MISSING) ? ClinicalAttribute.DEFAULT_DATATYPE : datatype);
                columnHeaders.add(attributeValue(metadata.getNormalizedColumnHeader()));
            }
            else {
                // the column is ignored
                // but we still need a correct number of rows in the column
                descriptions.add(ClinicalAttribute.MISSING);
                datatypes.add(ClinicalAttribute.DEFAULT_DATATYPE);
                columnHeaders.add(ClinicalAttribute.MISSING);
            }
        }

        // prepend required "#"
        dataMatrix.renameColumn(dataMatrix.getColumnHeaders().get(0),
                                ImportClinicalData.METADATA_PREFIX + dataMatrix.getColumnHeaders().get(0));
        datatypes.set(0, ImportClinicalData.METADATA_PREFIX + datatypes.get(0));
        descriptions.set(0, ImportClinicalData.METADATA_PREFIX + descriptions.get(0));

        // insert row in reverse order 
        dataMatrix.insertRow(columnHeaders);
        dataMatrix.insertRow(datatypes);
        dataMatrix.insertRow(descriptions);
        // display name becomes dataMatrix column headers
    }

    private String attributeValue(String attribute)
    {
        return (attribute.isEmpty()) ? ClinicalAttribute.MISSING : attribute;
    }
}
