/** Copyright (c) 2012 Memorial Sloan-Kettering Cancer Center.
**
** This library is free software; you can redistribute it and/or modify it
** under the terms of the GNU Lesser General Public License as published
** by the Free Software Foundation; either version 2.1 of the License, or
** any later version.
**
** This library is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
** MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
** documentation provided hereunder is on an "as is" basis, and
** Memorial Sloan-Kettering Cancer Center 
** has no obligations to provide maintenance, support,
** updates, enhancements or modifications.  In no event shall
** Memorial Sloan-Kettering Cancer Center
** be liable to any party for direct, indirect, special,
** incidental or consequential damages, including lost profits, arising
** out of the use of this software and its documentation, even if
** Memorial Sloan-Kettering Cancer Center 
** has been advised of the possibility of such damage.  See
** the GNU Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public License
** along with this library; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
**/

// package
package org.mskcc.cbio.importer.converter.internal;

// imports
import com.google.common.collect.HashBasedTable;
import com.google.common.collect.Table;
import org.mskcc.cbio.portal.model.ClinicalAttribute;
import org.mskcc.cbio.portal.scripts.ImportClinicalData;
import org.mskcc.cbio.importer.Config;
import org.mskcc.cbio.importer.CaseIDs;
import org.mskcc.cbio.importer.IDMapper;
import org.mskcc.cbio.importer.Converter;
import org.mskcc.cbio.importer.FileUtils;
import org.mskcc.cbio.importer.model.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.*;
import java.io.IOException;
import java.util.regex.Pattern;

/**
 * Class which implements the Converter interface for use
 * with TCGA clinical data generated by the Biospecimen Core Resource.
 */
public class ClinicalDataConverterImpl extends ConverterBaseImpl implements Converter {

	private static Log LOG = LogFactory.getLog(ClinicalDataConverterImpl.class);

	private Config config;
	private FileUtils fileUtils;
	private CaseIDs caseIDs;
	private IDMapper idMapper;

	public ClinicalDataConverterImpl(Config config, FileUtils fileUtils,
									 CaseIDs caseIDs, IDMapper idMapper)
    {

		this.config = config;
        this.fileUtils = fileUtils;
		this.caseIDs = caseIDs;
		this.idMapper = idMapper;
	}

    @Override
	public void convertData(String portal, String runDate, Boolean applyOverrides) throws Exception
    {
		throw new UnsupportedOperationException();
	}

    @Override
	public void generateCaseLists(String portal) throws Exception
    {
		throw new UnsupportedOperationException();
	}

    @Override
	public void applyOverrides(String portal, Set<String> excludeDatatypes, boolean applyCaseLists) throws Exception
    {
		throw new UnsupportedOperationException();
    }

	@Override
	public void createStagingFile(PortalMetadata portalMetadata, CancerStudyMetadata cancerStudyMetadata,
								  DatatypeMetadata datatypeMetadata, DataMatrix[] dataMatrices) throws Exception {

		// sanity check
		if (dataMatrices.length != 1) {
			throw new IllegalArgumentException("dataMatrices.length != 1, aborting...");
		}
		DataMatrix dataMatrix = processDataMatrix(dataMatrices[0]);

		logMessage(LOG, "createStagingFile(), writing staging file.");
        fileUtils.writeStagingFile(portalMetadata.getStagingDirectory(), cancerStudyMetadata, datatypeMetadata, dataMatrix);
		logMessage(LOG, "createStagingFile(), complete.");
	}

    private DataMatrix processDataMatrix(DataMatrix datamatrix)
    {
        HashMap<String, ClinicalAttributesMetadata> clinicalAttributes = getClinicalAttributesHashMap();
        return null;
    }
    
    private HashMap<String, ClinicalAttributesMetadata> getClinicalAttributesHashMap()
    {
        HashMap toReturn = new HashMap<String, ClinicalAttributesMetadata>();
        for (ClinicalAttributesMetadata clinicalAttributeMetadata : config.getClinicalAttributesMetadata(Config.ALL)) {
            toReturn.put(clinicalAttributeMetadata.getExternalColumnHeader(), clinicalAttributeMetadata);
        }

        return toReturn;
    }
}
