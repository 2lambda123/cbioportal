/** Copyright (c) 2012 Memorial Sloan-Kettering Cancer Center.
**
** This library is free software; you can redistribute it and/or modify it
** under the terms of the GNU Lesser General Public License as published
** by the Free Software Foundation; either version 2.1 of the License, or
** any later version.
**
** This library is distributed in the hope that it will be useful, but
** WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
** MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
** documentation provided hereunder is on an "as is" basis, and
** Memorial Sloan-Kettering Cancer Center 
** has no obligations to provide maintenance, support,
** updates, enhancements or modifications.  In no event shall
** Memorial Sloan-Kettering Cancer Center
** be liable to any party for direct, indirect, special,
** incidental or consequential damages, including lost profits, arising
** out of the use of this software and its documentation, even if
** Memorial Sloan-Kettering Cancer Center 
** has been advised of the possibility of such damage.  See
** the GNU Lesser General Public License for more details.
**
** You should have received a copy of the GNU Lesser General Public License
** along with this library; if not, write to the Free Software Foundation,
** Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
**/

// package
package org.mskcc.cbio.importer.converter.internal;

// imports
import org.mskcc.cbio.importer.Config;
import org.mskcc.cbio.importer.CaseIDs;
import org.mskcc.cbio.importer.IDMapper;
import org.mskcc.cbio.importer.Converter;
import org.mskcc.cbio.importer.FileUtils;
import org.mskcc.cbio.importer.model.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.*;
import java.util.regex.Matcher;

/**
 * Class which implements the Converter interface for use
 * with TCGA clinical data generated by the Biospecimen Core Resource.
 */
public abstract class ClinicalDataConverterImpl extends ConverterBaseImpl implements Converter
{
    private static final String PLACEHOLDER = "MISSING_ATTRIBUTE_VALUE";
	private static final Log LOG = LogFactory.getLog(ClinicalDataConverterImpl.class);

	protected Config config;
	protected FileUtils fileUtils;
	protected CaseIDs caseIDs;
	protected IDMapper idMapper;

	public ClinicalDataConverterImpl(Config config, FileUtils fileUtils,
                                     CaseIDs caseIDs, IDMapper idMapper)
    {
		this.config = config;
        this.fileUtils = fileUtils;
		this.caseIDs = caseIDs;
		this.idMapper = idMapper;
	}

    @Override
	public void convertData(String portal, String runDate, Boolean applyOverrides) throws Exception
    {
		throw new UnsupportedOperationException();
	}

    @Override
	public void generateCaseLists(String portal) throws Exception
    {
		throw new UnsupportedOperationException();
	}

    @Override
	public void applyOverrides(String portal, Set<String> excludeDatatypes, boolean applyCaseLists) throws Exception
    {
		throw new UnsupportedOperationException();
    }

	@Override
	public abstract void createStagingFile(PortalMetadata portalMetadata, CancerStudyMetadata cancerStudyMetadata,
                                           DatatypeMetadata datatypeMetadata, DataMatrix[] dataMatrices) throws Exception;

    protected List<String> removeUnknownColumnsFromMatrix(DataMatrix dataMatrix, Map<String, ClinicalAttributesMetadata> clinicalAttributes)
    {
        List<String> missingAttributes = new ArrayList<String>();

        for (String externalColumnHeader : dataMatrix.getColumnHeaders()) {
            if (!clinicalAttributes.containsKey(externalColumnHeader)) {
                dataMatrix.ignoreColumn(externalColumnHeader, true);
                missingAttributes.add(externalColumnHeader);
                logMessage(LOG, "removeUnknownColumnsFromMatrix(), unknown clinical attribute: " +
                           externalColumnHeader + " (" + dataMatrix.getFilename() + ")");
            }
        }

        return missingAttributes;
    }

    protected void modifyMatrixHeaderToPortalSpec(DataMatrix dataMatrix, Map<String, ClinicalAttributesMetadata> clinicalAttributes)
    {
        List<String> descriptions = new ArrayList<String>();
        List<String> datatypes = new ArrayList<String>();
        List<String> columnHeaders = new ArrayList<String>();

        for (String externalColumnHeader : dataMatrix.getColumnHeaders()) {
            if (clinicalAttributes.containsKey(externalColumnHeader)) {
                ClinicalAttributesMetadata metadata = clinicalAttributes.get(externalColumnHeader);
                dataMatrix.renameColumn(externalColumnHeader, attributeValue(metadata.getDisplayName()));
                descriptions.add(attributeValue(metadata.getDescription()));
                datatypes.add(attributeValue(metadata.getDatatype()));
                columnHeaders.add(attributeValue(metadata.getNormalizedColumnHeader()));
            }
            else {
                // the colmun is ignored
                // but we still need a correct number of rows in the column
                descriptions.add(PLACEHOLDER);
                datatypes.add(PLACEHOLDER);
                columnHeaders.add(PLACEHOLDER);
            }
        }
        // insert row in reverse order 
        dataMatrix.insertRow(columnHeaders);
        dataMatrix.insertRow(datatypes);
        dataMatrix.insertRow(descriptions);
        // display name becomes dataMatrix column headers
    }

    private String attributeValue(String attribute)
    {
        return (attribute.isEmpty()) ? PLACEHOLDER : attribute;
    }
}
