package org.mskcc.cbio.annotator;

import org.mskcc.cbio.maf.*;

import java.io.*;
import java.util.List;

public class Annotator
{
	// config params (TODO create a config class instead?)
	protected boolean sortColumns;
	protected boolean addMissingCols;

	// intermediate annotator files
	public static final String INTERMEDIATE_IN = "annotator_in.txt";
	public static final String INTERMEDIATE_OUT = "annotator_out.txt";

	public Annotator()
	{
		// init default settings
		this.sortColumns = false;
		this.addMissingCols = false;
	}

	public void annotateFile(File input,
			File output) throws IOException
	{
		// TODO pre annotate:
		// -- annotate file with external perl tool
		// -- extract new column names from the output file generated by the tool
		// -- init AnnoMafProcessor with the list of new column names

		List<String> annoHeaders = this.extractAnnoHeaders();

		FileReader reader = new FileReader(input);
		BufferedReader bufReader = new BufferedReader(reader);
		MafHeaderUtil headerUtil = new MafHeaderUtil();

		String headerLine = headerUtil.extractHeader(bufReader);
		MafUtil mafUtil = new MafUtil(headerLine);

		AnnoMafProcessor processor = new AnnoMafProcessor(headerLine, annoHeaders);

		FileWriter writer = new FileWriter(output);

		// write comments/metadata to the output
		FileIOUtil.writeLines(writer, headerUtil.getComments());

		// create new header line for output
		List<String> columnNames = processor.newHeaderList(
				this.sortColumns, this.addMissingCols);

		// write the header line to output
		FileIOUtil.writeLine(writer, columnNames);

		String dataLine = bufReader.readLine();

		// process the file line by line
		while (dataLine != null)
		{
			// skip empty lines
			if (dataLine.trim().length() == 0)
			{
				dataLine = bufReader.readLine();
				continue;
			}

			// update total number of records processed
			//this.numRecordsProcessed++;

			MafRecord mafRecord = mafUtil.parseRecord(dataLine);
			// TODO by using maf record get annotation data from the output file
			//AnnoRecord record = this.annotateRecord(mafRecord);

			// get the data and update/add new oncotator columns
			List<String> data = processor.newDataList(dataLine);

			// TODO send the parsed data (as a hashmap? -- second parameter)
			processor.updateAnnoData(data);

			// write data to the output file
			FileIOUtil.writeLine(writer, data);

			dataLine = bufReader.readLine();
		}

		reader.close();
		writer.close();

	}

	// TODO code duplication! -- we have the same code in liftover module
	/**
	 * Executes an external process via system call.
	 *
	 * @param args          process arguments (including the process itself)
	 * @return              exit value of the process
	 * @throws IOException  if an IO error occurs
	 */
	public static int execProcess(String[] args) throws IOException
	{
		Process process = Runtime.getRuntime().exec(args);

		InputStream stdin = process.getInputStream();
		InputStream stderr = process.getErrorStream();
		InputStreamReader isr = new InputStreamReader(stdin);
		InputStreamReader esr = new InputStreamReader(stderr);
		BufferedReader inReader = new BufferedReader(isr);
		BufferedReader errReader = new BufferedReader(esr);

		// echo output messages to stdout
		String line = null;

		while ((line = inReader.readLine()) != null)
		{
			System.out.println(line);
		}

		// also echo error messages
		while ((line = errReader.readLine()) != null)
		{
			System.out.println(line);
		}

		int exitValue = -1;

		// wait for process to complete
		try
		{
			exitValue = process.waitFor();
		}
		catch (InterruptedException e)
		{
			e.printStackTrace();
		}

		return exitValue;
	}

	protected void outputFileNames(File input, File output)
	{
		System.out.println("Reading input from: " + input.getAbsolutePath());
		System.out.println("Writing output to: " + output.getAbsolutePath());
	}

	protected List<String> extractAnnoHeaders()
	{
		// TODO extract new anno headers from the output generated by the external tool
		return null;
	}

	// Getters and Setters

	public boolean isSortColumns()
	{
		return sortColumns;
	}

	public void setSortColumns(boolean sortColumns)
	{
		this.sortColumns = sortColumns;
	}

	public boolean isAddMissingCols()
	{
		return addMissingCols;
	}

	public void setAddMissingCols(boolean addMissingCols)
	{
		this.addMissingCols = addMissingCols;
	}
}
